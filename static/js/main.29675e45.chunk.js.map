{"version":3,"sources":["components/DrumPad.js","components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","audio","useRef","useEffect","window","addEventListener","handleKeyPress","removeEventListener","e","keyCode","sample","playSound","current","currentTime","play","updateDisplay","id","type","className","onClick","keyTrigger","ref","src","url","DrumMachine","useState","display","setDisplay","newPhrase","samples","map","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAgCeA,EA9BC,SAAAC,GACZ,IAAMC,EAAQC,iBAAO,MACrBC,qBAAU,WAEN,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACHF,OAAOG,oBAAoB,UAAWD,OAG9C,IAAMA,EAAiB,SAACE,GACjBA,EAAEC,UAAYT,EAAMU,OAAOD,SAC1BE,KAGFA,EAAY,WACdV,EAAMW,QAAQC,YAAc,EAC5BZ,EAAMW,QAAQE,OACdd,EAAMe,cAAcf,EAAMU,OAAOM,KAErC,OACI,4BAAQA,GAAIhB,EAAMU,OAAOM,GAAIC,KAAK,SAASC,UAAU,WAAWC,QAASR,GACrE,2BAAOK,GAAIhB,EAAMU,OAAOU,WACpBC,IAAKpB,EACLqB,IAAKtB,EAAMU,OAAOa,IAClBL,UAAU,SAEblB,EAAMU,OAAOU,aCVXI,EAbK,SAAAxB,GAAU,IAAD,EACKyB,mBAAS,gBADd,mBAClBC,EADkB,KACTC,EADS,KAEnBZ,EAAgB,SAACa,GACnBD,EAAWC,IAEf,OACI,yBAAKZ,GAAG,gBACJ,yBAAKA,GAAG,WAAWU,GAClBG,EAAQC,KAAI,SAAApB,GAAM,OAAI,kBAAC,EAAD,CAASA,OAAQA,EAAQK,cAAeA,SAOrEc,EAAU,CAAC,CACbpB,QAAS,GACTW,WAAY,IACZJ,GAAI,WACJO,IAAK,4DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,WACJO,IAAK,4DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,WACJO,IAAK,4DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,WACJO,IAAK,8DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,OACJO,IAAK,4DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,UACJO,IAAK,0DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,cACJO,IAAK,8DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,OACJO,IAAK,8DACJ,CACDd,QAAS,GACTW,WAAY,IACZJ,GAAI,YACJO,IAAK,2DClDMQ,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCIcc,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29675e45.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst DrumPad = props => {\n    const audio = useRef(null);\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyPress);\n        return function cleanup() {\n            window.removeEventListener('keydown', handleKeyPress);\n        }\n    });\n    const handleKeyPress = (e) => {\n        if(e.keyCode === props.sample.keyCode) {\n            playSound();\n        }\n    };\n    const playSound = () => {\n        audio.current.currentTime = 0;\n        audio.current.play();\n        props.updateDisplay(props.sample.id);\n    }\n    return (\n        <button id={props.sample.id} type=\"button\" className=\"drum-pad\" onClick={playSound}>\n            <audio id={props.sample.keyTrigger} \n                ref={audio}\n                src={props.sample.url} \n                className=\"clip\" \n            />\n            {props.sample.keyTrigger}\n        </button>\n    );\n};\n\nexport default DrumPad;","import React, { useState } from 'react';\n\nimport DrumPad from './DrumPad';\n\nconst DrumMachine = props => {\n    const [display, setDisplay] = useState('DRUM MACHINE')\n    const updateDisplay = (newPhrase) => {\n        setDisplay(newPhrase);\n    }\n    return (\n        <div id=\"drum-machine\">\n            <div id=\"display\">{display}</div>\n            {samples.map(sample => <DrumPad sample={sample} updateDisplay={updateDisplay}/>)}\n        </div>\n    );\n}\n\nexport default DrumMachine;\n\nconst samples = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n];","import React from 'react';\nimport './App.css';\n\nimport DrumMachine from './components/DrumMachine';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}